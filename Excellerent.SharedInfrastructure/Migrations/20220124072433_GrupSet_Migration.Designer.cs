// <auto-generated />
using System;
using Excellerent.SharedInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Excellerent.SharedInfrastructure.Migrations
{
    [DbContext(typeof(EPPContext))]
    [Migration("20220124072433_GrupSet_Migration")]
    partial class GrupSet_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Applicant", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUpload")
                        .HasColumnType("text");

                    b.Property<string>("ResumeUpload")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LuPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("MonthOfExpierence")
                        .HasColumnType("integer");

                    b.Property<string>("OtherSkillSet")
                        .HasColumnType("text");

                    b.Property<Guid>("PositionToApplyID")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimarySkillSetID")
                        .HasColumnType("text");

                    b.Property<Guid>("ProficiencyLevelID")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondarySkillSetID")
                        .HasColumnType("text");

                    b.Property<int>("YearsOfExpierence")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LuPositionToApplyGuid");

                    b.HasIndex("ProficiencyLevelID");

                    b.ToTable("ApplicantAreaOfInterest");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EducationProgrammeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherFieldOfStudy")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EducationProgrammeId");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.JobRequirment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobBrief")
                        .HasColumnType("text");

                    b.Property<string>("JobDescriptionName")
                        .HasColumnType("text");

                    b.Property<string>("JobResponsiblity")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("JobRequirment");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EducationProgrammes");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EducationName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.ToTable("FieldOfStudie");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LUPositionToApplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LUSkillSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LUPositionToApplyId");

                    b.HasIndex("LUSkillSetId");

                    b.ToTable("LUPositionSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("PositionToApply");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OtherSkillSet")
                        .HasColumnType("integer");

                    b.Property<int>("PositionToApplyID")
                        .HasColumnType("integer");

                    b.Property<int>("PrimarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<int>("SecondarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("luPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("skillSetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("luPositionToApplyGuid");

                    b.HasIndex("skillSetGuid");

                    b.ToTable("SkillPositionAssociation");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("SkillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Affliation")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SalesPersonGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientStatusGuid");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("OperatingAddresses");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectGuid");

                    b.ToTable("AssignResources");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerAssigned")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SupervisorGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientGuid");

                    b.HasIndex("ProjectStatusGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowResource")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Country", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DeviceDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocateTo")
                        .HasColumnType("text");

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyDeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceClassificationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsWorking")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Purchaser")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SubCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Warranty")
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.ToTable("DeviceDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("CountryId");

                    b.ToTable("DutyBranches");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EmergencyAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("email2")
                        .HasColumnType("text");

                    b.Property<string>("email3")
                        .HasColumnType("text");

                    b.Property<string>("houseNumber")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber3")
                        .HasColumnType("text");

                    b.Property<string>("postalCode")
                        .HasColumnType("text");

                    b.Property<string>("stateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("subCityZone")
                        .HasColumnType("text");

                    b.Property<string>("woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("EmergencyContactsModel");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail2")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail3")
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BranchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaynEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DutyBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.HasIndex("BranchGuid");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeOrganizations");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("PersonalAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Relationship", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimesheetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimesheetGuid");

                    b.ToTable("TimeEntry");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.Property<Guid>("TimesheetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("TimesheetId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TimesheetAprovals");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("GroupSets");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupSetPermissions");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyValue")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("014e3c7e-e986-4e92-99ef-5aebf930edd5"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 637, DateTimeKind.Local).AddTicks(3829),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "create_timesheet",
                            Level = "1",
                            Name = "addtimeentry",
                            ParentCode = "001",
                            PermissionCode = "00101"
                        },
                        new
                        {
                            Guid = new Guid("e51c7ceb-f884-49b3-aaac-7ecc6018ea0f"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7639),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet",
                            Level = "1",
                            Name = "gettimesheet",
                            ParentCode = "001",
                            PermissionCode = "00102"
                        },
                        new
                        {
                            Guid = new Guid("f7cee4ef-a283-4771-b81d-0445f63d4973"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7686),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetTimeEntries",
                            Level = "1",
                            Name = "gettimeentries",
                            ParentCode = "001",
                            PermissionCode = "00103"
                        },
                        new
                        {
                            Guid = new Guid("bd000251-b35a-4a85-b9fc-1e3335e3aa10"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7689),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_TimeEntry",
                            Level = "1",
                            Name = "updatetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00104"
                        },
                        new
                        {
                            Guid = new Guid("1629e629-85ea-4127-bc71-47e6860afb9e"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7691),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_TimeEntry",
                            Level = "1",
                            Name = "deletetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00105"
                        },
                        new
                        {
                            Guid = new Guid("9d61a9fc-6db0-473e-9051-91b3cb93b7c9"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7703),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetApprovalStatus",
                            Level = "1",
                            Name = "getapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00106"
                        },
                        new
                        {
                            Guid = new Guid("18cd1984-e712-4582-9ab1-56ac5666e47d"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7705),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Approve_timesheet",
                            Level = "1",
                            Name = "addapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00107"
                        },
                        new
                        {
                            Guid = new Guid("63db76f9-7dd0-4778-ad8d-0399ebe036b1"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7707),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Reject_TimeSheet",
                            Level = "1",
                            Name = "rejecttimesheet",
                            ParentCode = "001",
                            PermissionCode = "00108"
                        },
                        new
                        {
                            Guid = new Guid("2d76606b-ab91-44ce-9db8-be5f487115a8"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7733),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Request_ForReview",
                            Level = "1",
                            Name = "requestforreview",
                            ParentCode = "001",
                            PermissionCode = "00109"
                        },
                        new
                        {
                            Guid = new Guid("3a2715ca-5d8a-42c7-a2fe-426cef08d971"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7736),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetTimeSheetConfiguration",
                            Level = "1",
                            Name = "gettimesheetconfiguration",
                            ParentCode = "001",
                            PermissionCode = "00110"
                        },
                        new
                        {
                            Guid = new Guid("4fe1f662-1e8c-4c0b-9ec2-16848d042480"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7738),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Assign_Resource",
                            Level = "1",
                            Name = "addassignresource",
                            ParentCode = "002",
                            PermissionCode = "00201"
                        },
                        new
                        {
                            Guid = new Guid("c763293f-1532-4a50-af56-87aa3d303869"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7740),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Resources",
                            Level = "1",
                            Name = "getassignresource",
                            ParentCode = "002",
                            PermissionCode = "00202"
                        },
                        new
                        {
                            Guid = new Guid("561235fd-0a25-4b39-b32c-6643fdd3623f"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7742),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetAssignedResourceById",
                            Level = "1",
                            Name = "getassignresourcebyid",
                            ParentCode = "002",
                            PermissionCode = "00203"
                        },
                        new
                        {
                            Guid = new Guid("2e277c13-ec7a-4b4d-8372-de9773fa2763"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7746),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Resources",
                            Level = "1",
                            Name = "updateassignresource",
                            ParentCode = "002",
                            PermissionCode = "00204"
                        },
                        new
                        {
                            Guid = new Guid("ecc1f70c-5b8e-4eb5-8e7d-b13ee691c40e"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7748),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Remove_Resource",
                            Level = "1",
                            Name = "deleteassignresource",
                            ParentCode = "002",
                            PermissionCode = "00205"
                        },
                        new
                        {
                            Guid = new Guid("da6a7baf-8e7d-4495-8b07-186e9a89c38b"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7750),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Project",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00206"
                        },
                        new
                        {
                            Guid = new Guid("7fd30809-3419-4f7f-98d6-9636c6e7272c"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7754),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Project",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00207"
                        },
                        new
                        {
                            Guid = new Guid("765f46b4-98bd-442c-b906-720ef0222703"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7757),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Project",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00208"
                        },
                        new
                        {
                            Guid = new Guid("570e00fb-c6b2-4b10-9b5d-16e45de01613"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7810),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Remove_Project",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00209"
                        },
                        new
                        {
                            Guid = new Guid("84afee73-fbb1-4af8-a63a-f167b4b996b2"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7813),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "AddProjectStatus",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00210"
                        },
                        new
                        {
                            Guid = new Guid("37cad403-ff3b-46f5-a42b-1e8aed4134af"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7815),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "ViewProjectStatus",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00211"
                        },
                        new
                        {
                            Guid = new Guid("5a82546a-b6bc-42fb-b61b-f8cc40ba0987"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7817),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetProjectStatusById",
                            Level = "1",
                            Name = "getprojectstatusbyid",
                            ParentCode = "002",
                            PermissionCode = "00212"
                        },
                        new
                        {
                            Guid = new Guid("0bf59d08-dd33-4bc9-be99-4c47e4f4a42d"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7819),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "RemoveProjectStatus ",
                            Level = "1",
                            Name = "delete",
                            ParentCode = "002",
                            PermissionCode = "00213"
                        },
                        new
                        {
                            Guid = new Guid("28f459a1-3c95-479e-8bd0-2efe2180f56d"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7822),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetClient",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00214"
                        },
                        new
                        {
                            Guid = new Guid("ba1a9de6-a62d-461c-869b-4165a28fd9f6"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7825),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "AddClient",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00215"
                        },
                        new
                        {
                            Guid = new Guid("093fecc8-c344-4564-976f-748eb7976e5f"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7827),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "EditClient",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00216"
                        },
                        new
                        {
                            Guid = new Guid("7ebd3b84-a3f1-4f6f-92f7-bb23b9172de9"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7829),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "RemoveClient",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00217"
                        },
                        new
                        {
                            Guid = new Guid("966f0789-6b88-4610-b989-23748dda5434"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7832),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetAllEmployees",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00218"
                        },
                        new
                        {
                            Guid = new Guid("86a073ab-3884-4c13-b8df-5255b5fcc1ac"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7834),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "GetEmployeesById",
                            Level = "1",
                            Name = "getbyid",
                            ParentCode = "002",
                            PermissionCode = "00219"
                        },
                        new
                        {
                            Guid = new Guid("8265a269-ced6-4ae6-8dab-a74b1cb2e916"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7836),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Admin",
                            Level = "0",
                            Name = "employeeadmin",
                            ParentCode = "",
                            PermissionCode = "003"
                        },
                        new
                        {
                            Guid = new Guid("146cabe8-b4cc-43be-98d7-f46671806bd2"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7843),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Employee",
                            Level = "1",
                            Name = "createemployee",
                            ParentCode = "003",
                            PermissionCode = "00301"
                        },
                        new
                        {
                            Guid = new Guid("e3497e68-28dc-45ab-b4a8-2d32128abe2e"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7845),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Employee",
                            Level = "1",
                            Name = "viewemployee",
                            ParentCode = "003",
                            PermissionCode = "00302"
                        },
                        new
                        {
                            Guid = new Guid("344ffe67-c32e-4f38-975c-649bdbd3ee8e"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7849),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Employee",
                            Level = "1",
                            Name = "updateemployee",
                            ParentCode = "003",
                            PermissionCode = "00303"
                        },
                        new
                        {
                            Guid = new Guid("0f41a31d-e37b-4474-8546-e7ff0dcc529f"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7852),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_My_Profile",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "003",
                            PermissionCode = "00304"
                        },
                        new
                        {
                            Guid = new Guid("e655de15-f696-425a-b91c-9f90b31c7a97"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7854),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_My_Profile",
                            Level = "1",
                            Name = "viewmyprofile",
                            ParentCode = "003",
                            PermissionCode = "00305"
                        },
                        new
                        {
                            Guid = new Guid("ce174f97-021a-4352-930c-d81271f93820"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7856),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_My_Profile",
                            Level = "1",
                            Name = "updatemyprofile",
                            ParentCode = "003",
                            PermissionCode = "00306"
                        },
                        new
                        {
                            Guid = new Guid("6e2c67a5-a415-4118-8cfe-db06d4fc2e97"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7858),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Admin",
                            Level = "1",
                            Name = "all",
                            ParentCode = "003",
                            PermissionCode = "00307"
                        },
                        new
                        {
                            Guid = new Guid("ff166800-2346-44b7-a8bc-6eb00702f3a1"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7860),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Management_Admin",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "004"
                        },
                        new
                        {
                            Guid = new Guid("6ce6b347-065a-41da-8325-1cb116b80488"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7862),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Group",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "004",
                            PermissionCode = "00401"
                        },
                        new
                        {
                            Guid = new Guid("6f30447a-6fe0-49c7-9b2d-05c324258405"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7864),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Group",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "004",
                            PermissionCode = "00402"
                        },
                        new
                        {
                            Guid = new Guid("d4bccef9-78cb-4af3-ad62-a40f5e537ae9"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7868),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Group",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "004",
                            PermissionCode = "00403"
                        },
                        new
                        {
                            Guid = new Guid("53fe9783-006b-4481-8d62-1d19b8983f73"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7870),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Add_User",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "004",
                            PermissionCode = "00404"
                        },
                        new
                        {
                            Guid = new Guid("2136c540-3b06-4b3c-8e83-aedbce64795d"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7872),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_User",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "004",
                            PermissionCode = "00405"
                        },
                        new
                        {
                            Guid = new Guid("8c851e34-a3bb-4ff3-a0f4-b429602215e4"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7874),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_User",
                            Level = "1",
                            Name = "updateuser",
                            ParentCode = "004",
                            PermissionCode = "00406"
                        },
                        new
                        {
                            Guid = new Guid("210bec75-a40e-41af-8f13-9b7d8a806551"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7876),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_User",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "004",
                            PermissionCode = "00407"
                        },
                        new
                        {
                            Guid = new Guid("1520e340-f12b-489b-9125-47d241b14174"),
                            CreatedDate = new DateTime(2022, 1, 24, 10, 24, 32, 641, DateTimeKind.Local).AddTicks(7878),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Management_Admin",
                            Level = "1",
                            Name = "all",
                            ParentCode = "004",
                            PermissionCode = "00408"
                        });
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.UserGroups", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "ApplicantInfo")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LuPositionToApply")
                        .WithMany()
                        .HasForeignKey("LuPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", "ProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("ProficiencyLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantInfo");

                    b.Navigation("LuPositionToApply");

                    b.Navigation("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", "EducationProgramme")
                        .WithMany()
                        .HasForeignKey("EducationProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId");

                    b.Navigation("Applicant");

                    b.Navigation("EducationProgramme");

                    b.Navigation("FieldOfStudy");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LUPositionToApply")
                        .WithMany()
                        .HasForeignKey("LUPositionToApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "LUSkillSet")
                        .WithMany()
                        .HasForeignKey("LUSkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LUPositionToApply");

                    b.Navigation("LUSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "luPositionToApply")
                        .WithMany()
                        .HasForeignKey("luPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "skillSet")
                        .WithMany()
                        .HasForeignKey("skillSetGuid");

                    b.Navigation("luPositionToApply");

                    b.Navigation("skillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("BillingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientStatus", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("CompanyContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("OperatingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", "Client")
                        .WithMany()
                        .HasForeignKey("ClientGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmergencyContact")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.DutyBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchGuid");

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithOne("EmployeeOrganization")
                        .HasForeignKey("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("FamilyDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("Nationality")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "TimeSheet")
                        .WithMany("TimeEntry")
                        .HasForeignKey("TimesheetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "Timesheet")
                        .WithMany()
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.UserGroups", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Navigation("BillingAddress");

                    b.Navigation("ClientContacts");

                    b.Navigation("CompanyContacts");

                    b.Navigation("OperatingAddress");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmergencyContact");

                    b.Navigation("EmployeeAddress");

                    b.Navigation("EmployeeOrganization");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Navigation("TimeEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
