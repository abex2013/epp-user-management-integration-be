// <auto-generated />
using System;
using Excellerent.SharedInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Excellerent.SharedInfrastructure.Migrations
{
    [DbContext(typeof(EPPContext))]
    [Migration("20220122020740_intial")]
    partial class intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Applicant", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUpload")
                        .HasColumnType("text");

                    b.Property<string>("ResumeUpload")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LuPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("MonthOfExpierence")
                        .HasColumnType("integer");

                    b.Property<string>("OtherSkillSet")
                        .HasColumnType("text");

                    b.Property<Guid>("PositionToApplyID")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimarySkillSetID")
                        .HasColumnType("text");

                    b.Property<Guid>("ProficiencyLevelID")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondarySkillSetID")
                        .HasColumnType("text");

                    b.Property<int>("YearsOfExpierence")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LuPositionToApplyGuid");

                    b.HasIndex("ProficiencyLevelID");

                    b.ToTable("ApplicantAreaOfInterest");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EducationProgrammeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherFieldOfStudy")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EducationProgrammeId");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.JobRequirment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobBrief")
                        .HasColumnType("text");

                    b.Property<string>("JobDescriptionName")
                        .HasColumnType("text");

                    b.Property<string>("JobResponsiblity")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("JobRequirment");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EducationProgrammes");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EducationName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.ToTable("FieldOfStudie");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LUPositionToApplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LUSkillSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LUPositionToApplyId");

                    b.HasIndex("LUSkillSetId");

                    b.ToTable("LUPositionSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("PositionToApply");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OtherSkillSet")
                        .HasColumnType("integer");

                    b.Property<int>("PositionToApplyID")
                        .HasColumnType("integer");

                    b.Property<int>("PrimarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<int>("SecondarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("luPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("skillSetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("luPositionToApplyGuid");

                    b.HasIndex("skillSetGuid");

                    b.ToTable("SkillPositionAssociation");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("SkillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Affliation")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SalesPersonGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientStatusGuid");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("OperatingAddresses");
                });

            modelBuilder.Entity("Excellerent.EppConfiguration.Domain.Model.Department", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Excellerent.EppConfiguration.Domain.Model.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectGuid");

                    b.ToTable("AssignResources");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerAssigned")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SupervisorGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientGuid");

                    b.HasIndex("ProjectStatusGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowResource")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Country", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DeviceDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocateTo")
                        .HasColumnType("text");

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyDeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceClassificationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsWorking")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Purchaser")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SubCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Warranty")
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.ToTable("DeviceDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("CountryId");

                    b.ToTable("DutyBranches");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EmergencyAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("email2")
                        .HasColumnType("text");

                    b.Property<string>("email3")
                        .HasColumnType("text");

                    b.Property<string>("houseNumber")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber3")
                        .HasColumnType("text");

                    b.Property<string>("postalCode")
                        .HasColumnType("text");

                    b.Property<string>("stateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("subCityZone")
                        .HasColumnType("text");

                    b.Property<string>("woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("EmergencyContactsModel");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail2")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail3")
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BranchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaynEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DutyBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.HasIndex("BranchGuid");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeOrganizations");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("PersonalAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Relationship", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimesheetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimesheetGuid");

                    b.ToTable("TimeEntry");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.Property<Guid>("TimesheetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("TimesheetId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TimesheetAprovals");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("GroupSets");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupSetPermissions");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyValue")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("400012f1-fc7f-4049-8b65-4cbbcdcc127a"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 30, DateTimeKind.Local).AddTicks(7461),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Timesheet_Module",
                            Level = "0",
                            Name = "addtimeentry",
                            ParentCode = "",
                            PermissionCode = "001"
                        },
                        new
                        {
                            Guid = new Guid("b9d7b2ea-ea73-432f-9205-0ba128f4308d"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1198),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Submit_Timesheet",
                            Level = "1",
                            Name = "addtimeentry",
                            ParentCode = "001",
                            PermissionCode = "00101"
                        },
                        new
                        {
                            Guid = new Guid("39541aad-5a3a-43ed-b2ef-0bef7b30568e"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1251),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet",
                            Level = "1",
                            Name = "gettimesheet",
                            ParentCode = "001",
                            PermissionCode = "00102"
                        },
                        new
                        {
                            Guid = new Guid("84273fb5-df07-48ed-91ac-1d3f321538c3"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1257),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Re-submit_Timesheet",
                            Level = "1",
                            Name = "gettimeentries",
                            ParentCode = "001",
                            PermissionCode = "00103"
                        },
                        new
                        {
                            Guid = new Guid("5f3054a3-bfdd-4286-92b7-f477258ab81c"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1259),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Edit_Timesheet ",
                            Level = "1",
                            Name = "updatetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00104"
                        },
                        new
                        {
                            Guid = new Guid("f73d6c00-25e1-40e1-9b35-5ab58984ae9a"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1267),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Timesheet",
                            Level = "1",
                            Name = "deletetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00105"
                        },
                        new
                        {
                            Guid = new Guid("8cbb70d4-f542-4862-96d3-40b7ac32e8eb"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1269),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet_Submissions ",
                            Level = "1",
                            Name = "getapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00106"
                        },
                        new
                        {
                            Guid = new Guid("1fb2ad90-f333-4708-9ba8-c895774a738f"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1272),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Approve_Timesheet ",
                            Level = "1",
                            Name = "addapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00107"
                        },
                        new
                        {
                            Guid = new Guid("76b8d78a-3717-4b6d-bd8e-6b68cd55be90"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1274),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Reject_Timesheet",
                            Level = "1",
                            Name = "rejecttimesheet",
                            ParentCode = "001",
                            PermissionCode = "00108"
                        },
                        new
                        {
                            Guid = new Guid("e5481066-8c24-4f5f-bc6d-cbcf2a5ef3de"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1284),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Request_for_Re-submit ",
                            Level = "1",
                            Name = "requestforreview",
                            ParentCode = "001",
                            PermissionCode = "00109"
                        },
                        new
                        {
                            Guid = new Guid("ee1d029c-8293-44a3-a71e-cc6e244a9d1c"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1286),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Timesheet_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "001",
                            PermissionCode = "00110"
                        },
                        new
                        {
                            Guid = new Guid("1dc273c5-de8b-4340-8cf4-86c456ea54d5"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1288),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Project_Module",
                            Level = "0",
                            Name = "Project",
                            ParentCode = "",
                            PermissionCode = "002"
                        },
                        new
                        {
                            Guid = new Guid("a5b9b69a-cae9-47f6-a64d-1d52528aafe5"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1290),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Project",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00201"
                        },
                        new
                        {
                            Guid = new Guid("9000d06f-1753-4bdd-a7b7-716c76e46716"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1292),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Project",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00202"
                        },
                        new
                        {
                            Guid = new Guid("414982c9-a532-4cb3-b95c-02c8249eee59"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1294),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Project",
                            Level = "1",
                            Name = "delete",
                            ParentCode = "002",
                            PermissionCode = "00203"
                        },
                        new
                        {
                            Guid = new Guid("907885f3-799d-4307-a03f-6c5ed17d281a"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1296),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Project",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00204"
                        },
                        new
                        {
                            Guid = new Guid("5c521ed9-bf2d-430b-984f-719d9f304ab0"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1297),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Assign_Resource",
                            Level = "1",
                            Name = "assignresource",
                            ParentCode = "002",
                            PermissionCode = "00205"
                        },
                        new
                        {
                            Guid = new Guid("2eb2c18d-5ca3-43d4-a78f-16d67224e8a9"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1302),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Resources",
                            Level = "1",
                            Name = "updateassignresource",
                            ParentCode = "002",
                            PermissionCode = "00206"
                        },
                        new
                        {
                            Guid = new Guid("31caa753-be78-4a7a-a25e-de20dcc7ac99"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1304),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Resources",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00207"
                        },
                        new
                        {
                            Guid = new Guid("97ba19fd-46bf-4636-9552-91833d3e48e0"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1306),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Resources",
                            Level = "1",
                            Name = "deleteassignresource",
                            ParentCode = "002",
                            PermissionCode = "00208"
                        },
                        new
                        {
                            Guid = new Guid("a4a1e61e-30dc-4a21-a0ca-1b7217f59e68"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1308),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Assign_Client",
                            Level = "1",
                            Name = "assignclient",
                            ParentCode = "002",
                            PermissionCode = "00209"
                        },
                        new
                        {
                            Guid = new Guid("04cc1087-a817-4170-823c-6404903f94cd"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1310),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = " Remove_Client",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00210"
                        },
                        new
                        {
                            Guid = new Guid("2d6c1cdc-3448-4f75-9161-308919985723"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1312),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Client",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00211"
                        },
                        new
                        {
                            Guid = new Guid("4fbf76f2-375e-4317-91eb-a397a8ea6fce"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1314),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Projects_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "002",
                            PermissionCode = "00212"
                        },
                        new
                        {
                            Guid = new Guid("f205d934-e24c-4714-84a8-5d132d093ee2"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1315),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Module",
                            Level = "0",
                            Name = "employeeadmin",
                            ParentCode = "",
                            PermissionCode = "003"
                        },
                        new
                        {
                            Guid = new Guid("c762fc05-a1b9-4271-bbff-e373742bc714"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1319),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Employee",
                            Level = "1",
                            Name = "createemployee",
                            ParentCode = "003",
                            PermissionCode = "00301"
                        },
                        new
                        {
                            Guid = new Guid("e44eb3a6-0f0f-43e6-a468-66fc54786a5b"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1321),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Employee",
                            Level = "1",
                            Name = "viewemployee",
                            ParentCode = "003",
                            PermissionCode = "00302"
                        },
                        new
                        {
                            Guid = new Guid("3e7c24dc-15fe-44bd-8a15-dc889ea4e30a"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1323),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Employee",
                            Level = "1",
                            Name = "updateemployee",
                            ParentCode = "003",
                            PermissionCode = "00303"
                        },
                        new
                        {
                            Guid = new Guid("f442c437-5ab8-4351-bfdf-9a98f119ad30"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1325),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete Employee",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "003",
                            PermissionCode = "00304"
                        },
                        new
                        {
                            Guid = new Guid("49dfa63a-4dfe-4f01-8114-98047e3a1cf6"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1326),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_My_Profile",
                            Level = "1",
                            Name = "viewmyprofile",
                            ParentCode = "003",
                            PermissionCode = "00305"
                        },
                        new
                        {
                            Guid = new Guid("69a6b2a6-8d2e-4413-a074-1318a1caef38"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1328),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_My_Profile",
                            Level = "1",
                            Name = "updatemyprofile",
                            ParentCode = "003",
                            PermissionCode = "00306"
                        },
                        new
                        {
                            Guid = new Guid("50b7df96-fd4a-4073-af89-b472a98a704f"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1330),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "003",
                            PermissionCode = "00307"
                        },
                        new
                        {
                            Guid = new Guid("c730714e-96fc-402d-b9fc-d500f2d55ed9"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1332),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Module",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "004"
                        },
                        new
                        {
                            Guid = new Guid("209757d5-0fc1-4650-889e-52a1443c69d9"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1336),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Group",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "004",
                            PermissionCode = "00401"
                        },
                        new
                        {
                            Guid = new Guid("288bcd83-9b1a-48bc-b841-466ed68ce3ea"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1338),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Group",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "004",
                            PermissionCode = "00402"
                        },
                        new
                        {
                            Guid = new Guid("2892baab-becd-4260-be4a-d43f67bc5bbe"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1340),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Group",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "004",
                            PermissionCode = "00403"
                        },
                        new
                        {
                            Guid = new Guid("c473458a-81c2-4510-8514-bc591490fc0c"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1342),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Group",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "004",
                            PermissionCode = "00404"
                        },
                        new
                        {
                            Guid = new Guid("9de5ef48-a2b5-4011-8ffa-e56b17578049"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1344),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Add_User",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "004",
                            PermissionCode = "00405"
                        },
                        new
                        {
                            Guid = new Guid("aa0564a0-c005-4130-ae91-78dbf37658d2"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1346),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_User",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "004",
                            PermissionCode = "00406"
                        },
                        new
                        {
                            Guid = new Guid("5c7a66be-b20c-4fae-996c-b5f3f44039a1"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1347),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_User",
                            Level = "1",
                            Name = "updateuser",
                            ParentCode = "004",
                            PermissionCode = "00407"
                        },
                        new
                        {
                            Guid = new Guid("a99a423d-a46c-4a11-bf3d-889befdfe0de"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1349),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_User",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "004",
                            PermissionCode = "00408"
                        },
                        new
                        {
                            Guid = new Guid("821a0451-e903-4e79-889c-4ecac4963f1b"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1353),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Management_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "004",
                            PermissionCode = "00409"
                        },
                        new
                        {
                            Guid = new Guid("dd5deea1-4971-4650-a3ba-9de21bc9f711"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1354),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Client_Module",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "005"
                        },
                        new
                        {
                            Guid = new Guid("268f2f80-c0e7-414b-aac6-89aec505cc3e"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1356),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Client",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "005",
                            PermissionCode = "00501"
                        },
                        new
                        {
                            Guid = new Guid("89469323-381a-4f27-b722-e24f905c6357"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1358),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Client",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "005",
                            PermissionCode = "00502"
                        },
                        new
                        {
                            Guid = new Guid("2d797a27-2f93-4c5c-86f6-57c7160456cf"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1360),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Client",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "005",
                            PermissionCode = "00503"
                        },
                        new
                        {
                            Guid = new Guid("0a95b77b-7341-4940-9df8-40ffb13bc549"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1362),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Client",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "005",
                            PermissionCode = "00504"
                        },
                        new
                        {
                            Guid = new Guid("cae23685-381f-484c-85dc-68c47973dcd8"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1364),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Client_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "005",
                            PermissionCode = "00505"
                        },
                        new
                        {
                            Guid = new Guid("b32752a8-ad61-4a82-ab7d-715cf5dc70b2"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1365),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Configuration_Module",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "006"
                        },
                        new
                        {
                            Guid = new Guid("a104f1b4-e943-4615-a734-067873ff73a2"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1369),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Department",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "006",
                            PermissionCode = "00601"
                        },
                        new
                        {
                            Guid = new Guid("91028b91-d7b8-4d47-8870-49411fae074b"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1371),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Department",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "006",
                            PermissionCode = "00602"
                        },
                        new
                        {
                            Guid = new Guid("fc1de5ac-2355-4aa5-99b7-66a593147bac"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1373),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Department",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "006",
                            PermissionCode = "00603"
                        },
                        new
                        {
                            Guid = new Guid("38cc17e4-71f2-4314-9d44-b0fcc2a4eff0"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1374),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Department",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "006",
                            PermissionCode = "00604"
                        },
                        new
                        {
                            Guid = new Guid("c81296fd-7f33-4918-8cf7-495289312b02"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1376),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Role",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "006",
                            PermissionCode = "00605"
                        },
                        new
                        {
                            Guid = new Guid("f85a38ca-a193-4185-8c1a-7b8996c930a5"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1378),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Role",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "006",
                            PermissionCode = "00606"
                        },
                        new
                        {
                            Guid = new Guid("cb396c60-f451-430d-914c-675660291dea"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1380),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Role",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "006",
                            PermissionCode = "00607"
                        },
                        new
                        {
                            Guid = new Guid("acc877c4-6f98-4b1f-bd0f-1370684372b6"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1382),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Role",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "006",
                            PermissionCode = "00608"
                        },
                        new
                        {
                            Guid = new Guid("f0ba78a5-7937-44ea-9a60-7e512cbbb46d"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1385),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Timesheet_Configuration",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "006",
                            PermissionCode = "00609"
                        },
                        new
                        {
                            Guid = new Guid("86b39efc-7c60-41dd-a260-46eb103a6a77"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1387),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Timesheet_Configuration",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "006",
                            PermissionCode = "00610"
                        },
                        new
                        {
                            Guid = new Guid("50d4d12b-03da-40ec-9008-ed0989651d04"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1389),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet_Configuration",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "006",
                            PermissionCode = "00611"
                        },
                        new
                        {
                            Guid = new Guid("0c233c2a-4be6-4939-9017-adb718777038"),
                            CreatedDate = new DateTime(2022, 1, 22, 6, 7, 40, 34, DateTimeKind.Local).AddTicks(1391),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Configuration_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "006",
                            PermissionCode = "00612"
                        });
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.UserGroups", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "ApplicantInfo")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LuPositionToApply")
                        .WithMany()
                        .HasForeignKey("LuPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", "ProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("ProficiencyLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantInfo");

                    b.Navigation("LuPositionToApply");

                    b.Navigation("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", "EducationProgramme")
                        .WithMany()
                        .HasForeignKey("EducationProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId");

                    b.Navigation("Applicant");

                    b.Navigation("EducationProgramme");

                    b.Navigation("FieldOfStudy");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LUPositionToApply")
                        .WithMany()
                        .HasForeignKey("LUPositionToApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "LUSkillSet")
                        .WithMany()
                        .HasForeignKey("LUSkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LUPositionToApply");

                    b.Navigation("LUSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "luPositionToApply")
                        .WithMany()
                        .HasForeignKey("luPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "skillSet")
                        .WithMany()
                        .HasForeignKey("skillSetGuid");

                    b.Navigation("luPositionToApply");

                    b.Navigation("skillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("BillingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientStatus", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("CompanyContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("OperatingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", "Client")
                        .WithMany()
                        .HasForeignKey("ClientGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmergencyContact")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.DutyBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchGuid");

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithOne("EmployeeOrganization")
                        .HasForeignKey("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("FamilyDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("Nationality")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "TimeSheet")
                        .WithMany("TimeEntry")
                        .HasForeignKey("TimesheetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "Timesheet")
                        .WithMany()
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.UserGroups", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Navigation("BillingAddress");

                    b.Navigation("ClientContacts");

                    b.Navigation("CompanyContacts");

                    b.Navigation("OperatingAddress");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmergencyContact");

                    b.Navigation("EmployeeAddress");

                    b.Navigation("EmployeeOrganization");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Navigation("TimeEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
