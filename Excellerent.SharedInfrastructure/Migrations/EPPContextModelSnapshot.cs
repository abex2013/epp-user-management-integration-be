// <auto-generated />
using System;
using Excellerent.SharedInfrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Excellerent.SharedInfrastructure.Migrations
{
    [DbContext(typeof(EPPContext))]
    partial class EPPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Applicant", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUpload")
                        .HasColumnType("text");

                    b.Property<string>("ResumeUpload")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LuPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("MonthOfExpierence")
                        .HasColumnType("integer");

                    b.Property<string>("OtherSkillSet")
                        .HasColumnType("text");

                    b.Property<Guid>("PositionToApplyID")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimarySkillSetID")
                        .HasColumnType("text");

                    b.Property<Guid>("ProficiencyLevelID")
                        .HasColumnType("uuid");

                    b.Property<string>("SecondarySkillSetID")
                        .HasColumnType("text");

                    b.Property<int>("YearsOfExpierence")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LuPositionToApplyGuid");

                    b.HasIndex("ProficiencyLevelID");

                    b.ToTable("ApplicantAreaOfInterest");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EducationProgrammeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Institution")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherFieldOfStudy")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EducationProgrammeId");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.JobRequirment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobBrief")
                        .HasColumnType("text");

                    b.Property<string>("JobDescriptionName")
                        .HasColumnType("text");

                    b.Property<string>("JobResponsiblity")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("JobRequirment");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EducationProgrammes");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EducationName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.ToTable("FieldOfStudie");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LUPositionToApplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LUSkillSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LUPositionToApplyId");

                    b.HasIndex("LUSkillSetId");

                    b.ToTable("LUPositionSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("PositionToApply");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OtherSkillSet")
                        .HasColumnType("integer");

                    b.Property<int>("PositionToApplyID")
                        .HasColumnType("integer");

                    b.Property<int>("PrimarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<int>("SecondarySkillSetID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("luPositionToApplyGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("skillSetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("luPositionToApplyGuid");

                    b.HasIndex("skillSetGuid");

                    b.ToTable("SkillPositionAssociation");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("SkillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Affliation")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SalesPersonGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientStatusGuid");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("CompanyContacts");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClientDetailsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ClientDetailsGuid");

                    b.ToTable("OperatingAddresses");
                });

            modelBuilder.Entity("Excellerent.EppConfiguration.Domain.Model.Department", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Excellerent.EppConfiguration.Domain.Model.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProjectGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectGuid");

                    b.ToTable("AssignResources");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerAssigned")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectStatusGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SupervisorGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ClientGuid");

                    b.HasIndex("ProjectStatusGuid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowResource")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Country", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DeviceDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllocateTo")
                        .HasColumnType("text");

                    b.Property<string>("BusinessUnit")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyDeviceCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceClassificationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsWorking")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Purchaser")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SubCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Warranty")
                        .HasColumnType("text");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.ToTable("DeviceDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("CountryId");

                    b.ToTable("DutyBranches");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("EmergencyAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("email2")
                        .HasColumnType("text");

                    b.Property<string>("email3")
                        .HasColumnType("text");

                    b.Property<string>("houseNumber")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber3")
                        .HasColumnType("text");

                    b.Property<string>("postalCode")
                        .HasColumnType("text");

                    b.Property<string>("stateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("subCityZone")
                        .HasColumnType("text");

                    b.Property<string>("woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("EmergencyContactsModel");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail2")
                        .HasColumnType("text");

                    b.Property<string>("PersonalEmail3")
                        .HasColumnType("text");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BranchGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaynEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DutyBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Guid");

                    b.HasIndex("BranchGuid");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeOrganizations");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("StateRegionProvice")
                        .HasColumnType("text");

                    b.Property<string>("SubCityZone")
                        .HasColumnType("text");

                    b.Property<string>("Woreda")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("PersonalAddresses");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Relationship", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.Configuration", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Hour")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimesheetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimesheetGuid");

                    b.ToTable("TimeEntry");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.Property<Guid>("TimesheetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("TimesheetId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TimesheetAprovals");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("GroupSets");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupSetPermissions");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyValue")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("c8dc32e4-83b6-488c-bb5f-7db48e091a87"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 885, DateTimeKind.Local).AddTicks(1347),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Timesheet_Module",
                            Level = "0",
                            Name = "addtimeentry",
                            ParentCode = "",
                            PermissionCode = "001"
                        },
                        new
                        {
                            Guid = new Guid("7a6d896e-8456-4d5a-8994-d95c86a35c42"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3367),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Submit_Timesheet",
                            Level = "1",
                            Name = "addtimeentry",
                            ParentCode = "001",
                            PermissionCode = "00101"
                        },
                        new
                        {
                            Guid = new Guid("b13b0cd7-aaba-49b7-a6e2-5b0ec1a3d261"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3447),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet",
                            Level = "1",
                            Name = "gettimesheet",
                            ParentCode = "001",
                            PermissionCode = "00102"
                        },
                        new
                        {
                            Guid = new Guid("6749d842-3690-441e-9a6d-c29f3df8c555"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3451),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Re-submit_Timesheet",
                            Level = "1",
                            Name = "gettimeentries",
                            ParentCode = "001",
                            PermissionCode = "00103"
                        },
                        new
                        {
                            Guid = new Guid("794878d2-6810-420c-ad9e-d07c5dd629d5"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3455),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Edit_Timesheet ",
                            Level = "1",
                            Name = "updatetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00104"
                        },
                        new
                        {
                            Guid = new Guid("452594d6-a2f5-4cc6-a0c2-684e55adc83f"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3465),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Timesheet",
                            Level = "1",
                            Name = "deletetimeentry",
                            ParentCode = "001",
                            PermissionCode = "00105"
                        },
                        new
                        {
                            Guid = new Guid("df4f9b8c-77b8-4b52-a93c-7d053875ae65"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3469),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet_Submissions ",
                            Level = "1",
                            Name = "getapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00106"
                        },
                        new
                        {
                            Guid = new Guid("ae74731b-eff6-4fb9-8a28-1a1f4932ffdf"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3485),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Approve_Timesheet ",
                            Level = "1",
                            Name = "addapprovalstatus",
                            ParentCode = "001",
                            PermissionCode = "00107"
                        },
                        new
                        {
                            Guid = new Guid("1a4c15b8-843b-407b-99d6-96f727b7e370"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3488),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Reject_Timesheet",
                            Level = "1",
                            Name = "rejecttimesheet",
                            ParentCode = "001",
                            PermissionCode = "00108"
                        },
                        new
                        {
                            Guid = new Guid("fcd154d6-e4c5-49dc-ac4a-cf5ab6a3d891"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3491),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Request_for_Re-submit ",
                            Level = "1",
                            Name = "requestforreview",
                            ParentCode = "001",
                            PermissionCode = "00109"
                        },
                        new
                        {
                            Guid = new Guid("85179f78-82ba-43fb-8cf4-c2e555ffda68"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3494),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Timesheet_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "001",
                            PermissionCode = "00110"
                        },
                        new
                        {
                            Guid = new Guid("fbfcece3-2081-4ce5-8a24-bdf6378e0b8a"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3496),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Project_Module",
                            Level = "0",
                            Name = "Project",
                            ParentCode = "",
                            PermissionCode = "002"
                        },
                        new
                        {
                            Guid = new Guid("84f5ab96-aa4b-4a1f-ac36-6d7277e6ce64"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3498),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Project",
                            Level = "1",
                            Name = "add",
                            ParentCode = "002",
                            PermissionCode = "00201"
                        },
                        new
                        {
                            Guid = new Guid("f7916a84-1a9c-444e-8033-ca1767dc2992"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3501),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Project",
                            Level = "1",
                            Name = "edit",
                            ParentCode = "002",
                            PermissionCode = "00202"
                        },
                        new
                        {
                            Guid = new Guid("5df49332-37e0-44e6-b283-5481275b0bcb"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3503),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Project",
                            Level = "1",
                            Name = "delete",
                            ParentCode = "002",
                            PermissionCode = "00203"
                        },
                        new
                        {
                            Guid = new Guid("ea143f55-408c-4065-8c58-2584592ad2da"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3508),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Project",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00204"
                        },
                        new
                        {
                            Guid = new Guid("ec8845cb-34b1-4076-b376-7959fc653db8"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3510),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Assign_Resource",
                            Level = "1",
                            Name = "assignresource",
                            ParentCode = "002",
                            PermissionCode = "00205"
                        },
                        new
                        {
                            Guid = new Guid("5906bd28-fb2d-4688-aeea-34eab6206923"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3513),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Resources",
                            Level = "1",
                            Name = "updateassignresource",
                            ParentCode = "002",
                            PermissionCode = "00206"
                        },
                        new
                        {
                            Guid = new Guid("87772f48-c632-493a-b8f2-4628d53f3936"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3515),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Resources",
                            Level = "1",
                            Name = "get",
                            ParentCode = "002",
                            PermissionCode = "00207"
                        },
                        new
                        {
                            Guid = new Guid("fdec8a06-a89b-4bf4-96ba-e4df58ba2591"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3521),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Resources",
                            Level = "1",
                            Name = "deleteassignresource",
                            ParentCode = "002",
                            PermissionCode = "00208"
                        },
                        new
                        {
                            Guid = new Guid("f22fecb9-2a13-4638-ab90-5a3855977279"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3523),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Assign_Client",
                            Level = "1",
                            Name = "assignclient",
                            ParentCode = "002",
                            PermissionCode = "00209"
                        },
                        new
                        {
                            Guid = new Guid("9be55453-913f-4ccc-aceb-e68502750369"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3525),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = " Remove_Client",
                            Level = "1",
                            Name = "remove",
                            ParentCode = "002",
                            PermissionCode = "00210"
                        },
                        new
                        {
                            Guid = new Guid("58ede41d-786d-4015-a02f-5e38e96c9ff6"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3527),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Client",
                            Level = "1",
                            Name = "getall",
                            ParentCode = "002",
                            PermissionCode = "00211"
                        },
                        new
                        {
                            Guid = new Guid("d13d06cc-38a4-432f-93d5-83af39477f2f"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3531),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Projects_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "002",
                            PermissionCode = "00212"
                        },
                        new
                        {
                            Guid = new Guid("f58cc67d-9b4a-4da2-ad5b-7713634b4044"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3532),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Module",
                            Level = "0",
                            Name = "employeeadmin",
                            ParentCode = "",
                            PermissionCode = "003"
                        },
                        new
                        {
                            Guid = new Guid("91c93aa6-936e-4498-a8ad-8a3596ee9462"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3534),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Employee",
                            Level = "1",
                            Name = "createemployee",
                            ParentCode = "003",
                            PermissionCode = "00301"
                        },
                        new
                        {
                            Guid = new Guid("13f807e3-f90d-40a1-a628-5b2d28b22592"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3536),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Employee",
                            Level = "1",
                            Name = "viewemployee",
                            ParentCode = "003",
                            PermissionCode = "00302"
                        },
                        new
                        {
                            Guid = new Guid("14be15c0-aed8-45e3-aa63-9b5b74b58dfb"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3539),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Employee",
                            Level = "1",
                            Name = "updateemployee",
                            ParentCode = "003",
                            PermissionCode = "00303"
                        },
                        new
                        {
                            Guid = new Guid("4e68e72c-e2df-4ab8-b926-8473b37d7887"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3541),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete Employee",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "003",
                            PermissionCode = "00304"
                        },
                        new
                        {
                            Guid = new Guid("d97b121e-8167-4766-902d-82ae87c42e8f"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3543),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_My_Profile",
                            Level = "1",
                            Name = "viewmyprofile",
                            ParentCode = "003",
                            PermissionCode = "00305"
                        },
                        new
                        {
                            Guid = new Guid("7ab1cf17-6ba9-4868-9105-78a775d46047"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3590),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_My_Profile",
                            Level = "1",
                            Name = "updatemyprofile",
                            ParentCode = "003",
                            PermissionCode = "00306"
                        },
                        new
                        {
                            Guid = new Guid("93ebb4d1-2257-4e5a-8dbf-33bcea9835a1"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3595),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Employee_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "003",
                            PermissionCode = "00307"
                        },
                        new
                        {
                            Guid = new Guid("cc5fb4e7-340a-41f9-bdcc-417fb85b2a5f"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3597),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Module",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "004"
                        },
                        new
                        {
                            Guid = new Guid("6f059601-adc3-415b-86d4-9f7c410e7538"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3600),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Group",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "004",
                            PermissionCode = "00401"
                        },
                        new
                        {
                            Guid = new Guid("bc2028e9-2856-4b96-800e-cfa1c5670412"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3602),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Group",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "004",
                            PermissionCode = "00402"
                        },
                        new
                        {
                            Guid = new Guid("81eac90e-bd55-423d-9cfe-3e19f99d41ae"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3604),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Group",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "004",
                            PermissionCode = "00403"
                        },
                        new
                        {
                            Guid = new Guid("566a37b6-a709-4212-908d-4862e3042415"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3606),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Add_User",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "004",
                            PermissionCode = "00404"
                        },
                        new
                        {
                            Guid = new Guid("1de7dc84-3d04-4ad0-85db-fc0574bfeea8"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3608),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_User",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "004",
                            PermissionCode = "00405"
                        },
                        new
                        {
                            Guid = new Guid("4b760a6e-8c79-4bd6-883a-3742bd098827"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3610),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_User",
                            Level = "1",
                            Name = "updateuser",
                            ParentCode = "004",
                            PermissionCode = "00406"
                        },
                        new
                        {
                            Guid = new Guid("d43d8a15-0ea4-4740-a149-4edaab93d9a9"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3614),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_User",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "004",
                            PermissionCode = "00407"
                        },
                        new
                        {
                            Guid = new Guid("87b59db0-9be5-4942-92e6-d3fb9fe14c42"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3616),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Group",
                            Level = "1",
                            Name = "deleteuser",
                            ParentCode = "004",
                            PermissionCode = "00408"
                        },
                        new
                        {
                            Guid = new Guid("49630adf-b6a0-4da7-a7ad-047fc8aae5e2"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3618),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "User_Management_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "004",
                            PermissionCode = "00409"
                        },
                        new
                        {
                            Guid = new Guid("b0987733-4302-47be-8745-ab722b1b31f4"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3620),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Client_Module",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "005"
                        },
                        new
                        {
                            Guid = new Guid("488d33da-9e1d-41ed-b50b-3d1b7818f5d9"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3623),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Client",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "005",
                            PermissionCode = "00501"
                        },
                        new
                        {
                            Guid = new Guid("02e4a351-72cc-432d-96b5-b62950fe6cd8"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3625),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Client",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "005",
                            PermissionCode = "00502"
                        },
                        new
                        {
                            Guid = new Guid("9b63366e-2d72-4f7a-8e0b-054451e5443a"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3627),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Client",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "005",
                            PermissionCode = "00503"
                        },
                        new
                        {
                            Guid = new Guid("bc739b1a-34dc-4534-bd0f-fa479685973d"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3629),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Client",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "005",
                            PermissionCode = "00504"
                        },
                        new
                        {
                            Guid = new Guid("15f32f4d-5913-4d74-988d-e2f4eb585bb2"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3633),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Client_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "005",
                            PermissionCode = "00505"
                        },
                        new
                        {
                            Guid = new Guid("8fb9f853-9aeb-48da-9ee9-646c188111d4"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3635),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Configuration_Module",
                            Level = "0",
                            Name = "usermanagementadmin",
                            ParentCode = "",
                            PermissionCode = "006"
                        },
                        new
                        {
                            Guid = new Guid("731d5f2a-d801-422e-9ab4-008d3078d373"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3637),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Department",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "006",
                            PermissionCode = "00601"
                        },
                        new
                        {
                            Guid = new Guid("bdda3721-a71b-4d37-b1dc-09bd248a77ef"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3639),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Department",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "006",
                            PermissionCode = "00602"
                        },
                        new
                        {
                            Guid = new Guid("2f28f68d-68e0-45a0-a6ed-8fc2fc9de4fe"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3641),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Department",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "006",
                            PermissionCode = "00603"
                        },
                        new
                        {
                            Guid = new Guid("d7b42713-10dd-433e-88f1-d81972d55dd0"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3643),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Department",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "006",
                            PermissionCode = "00604"
                        },
                        new
                        {
                            Guid = new Guid("820b6322-f1c3-4cfb-8856-5f405629d9f0"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3645),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Role",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "006",
                            PermissionCode = "00605"
                        },
                        new
                        {
                            Guid = new Guid("853dc403-6d91-4461-b5ed-5c7a1cf53816"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3647),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Role",
                            Level = "1",
                            Name = "creategroup",
                            ParentCode = "006",
                            PermissionCode = "00606"
                        },
                        new
                        {
                            Guid = new Guid("1b3ba5de-1b32-4369-ba17-8393790edee9"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3651),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Role",
                            Level = "1",
                            Name = "viewgroup",
                            ParentCode = "006",
                            PermissionCode = "00607"
                        },
                        new
                        {
                            Guid = new Guid("d7836d71-9192-492e-b35b-14ee464a2c9d"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3653),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Delete_Role",
                            Level = "1",
                            Name = "updategroup",
                            ParentCode = "006",
                            PermissionCode = "00608"
                        },
                        new
                        {
                            Guid = new Guid("8eaad2b0-c7e8-4c8e-a1e6-e54b5e0221af"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3655),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Create_Timesheet_Configuration",
                            Level = "1",
                            Name = "adduser",
                            ParentCode = "006",
                            PermissionCode = "00609"
                        },
                        new
                        {
                            Guid = new Guid("aa13cb33-beed-45f7-af2b-78e671d3c251"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3657),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Update_Timesheet_Configuration",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "006",
                            PermissionCode = "00610"
                        },
                        new
                        {
                            Guid = new Guid("60be3bad-ef97-4606-9b6c-634c62945b36"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3659),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "View_Timesheet_Configuration",
                            Level = "1",
                            Name = "viewuser",
                            ParentCode = "006",
                            PermissionCode = "00611"
                        },
                        new
                        {
                            Guid = new Guid("1e878b25-64ec-4322-a34c-f598ad25f968"),
                            CreatedDate = new DateTime(2022, 1, 24, 19, 59, 3, 888, DateTimeKind.Local).AddTicks(3661),
                            CreatedbyUserGuid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            KeyValue = "Configuration_Admin",
                            Level = "1",
                            Name = "Admin",
                            ParentCode = "006",
                            PermissionCode = "00612"
                        });
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.UserGroups", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedbyUserGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupSetGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GroupSetGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.ApplicantAreaOfInterest", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "ApplicantInfo")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LuPositionToApply")
                        .WithMany()
                        .HasForeignKey("LuPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUProficiencyLevel", "ProficiencyLevel")
                        .WithMany()
                        .HasForeignKey("ProficiencyLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantInfo");

                    b.Navigation("LuPositionToApply");

                    b.Navigation("ProficiencyLevel");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.Education", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUEducationProgram", "EducationProgramme")
                        .WithMany()
                        .HasForeignKey("EducationProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUFieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId");

                    b.Navigation("Applicant");

                    b.Navigation("EducationProgramme");

                    b.Navigation("FieldOfStudy");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUPositionSkillSet", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "LUPositionToApply")
                        .WithMany()
                        .HasForeignKey("LUPositionToApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "LUSkillSet")
                        .WithMany()
                        .HasForeignKey("LUSkillSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LUPositionToApply");

                    b.Navigation("LUSkillSet");
                });

            modelBuilder.Entity("Excellerent.ApplicantTracking.Domain.Models.LUSkillPositionAssociation", b =>
                {
                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUPositionToApply", "luPositionToApply")
                        .WithMany()
                        .HasForeignKey("luPositionToApplyGuid");

                    b.HasOne("Excellerent.ApplicantTracking.Domain.Models.LUSkillSet", "skillSet")
                        .WithMany()
                        .HasForeignKey("skillSetGuid");

                    b.Navigation("luPositionToApply");

                    b.Navigation("skillSet");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.BillingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("BillingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientStatus", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientStatus");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.CompanyContact", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("CompanyContacts")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.OperatingAddress", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", null)
                        .WithMany("OperatingAddress")
                        .HasForeignKey("ClientDetailsGuid");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.AssignResourcEntity", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Excellerent.ProjectManagement.Domain.Models.Project", b =>
                {
                    b.HasOne("Excellerent.ClientManagement.Domain.Models.ClientDetails", "Client")
                        .WithMany()
                        .HasForeignKey("ClientGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.DutyBranch", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmergencyContactsModel", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmergencyContact")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.DutyBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchGuid");

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithOne("EmployeeOrganization")
                        .HasForeignKey("Excellerent.ResourceManagement.Domain.Models.EmployeeOrganization", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.FamilyDetails", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("FamilyDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Nationality", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("Nationality")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.PersonalAddress", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", null)
                        .WithMany("EmployeeAddress")
                        .HasForeignKey("EmployeeGuid");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeEntry", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "TimeSheet")
                        .WithMany("TimeEntry")
                        .HasForeignKey("TimesheetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimesheetApproval", b =>
                {
                    b.HasOne("Excellerent.ProjectManagement.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Timesheet.Domain.Models.TimeSheet", "Timesheet")
                        .WithMany()
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.GroupSetPermission", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.User", b =>
                {
                    b.HasOne("Excellerent.ResourceManagement.Domain.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Excellerent.Usermanagement.Domain.Models.UserGroups", b =>
                {
                    b.HasOne("Excellerent.Usermanagement.Domain.Models.GroupSet", "GroupSet")
                        .WithMany()
                        .HasForeignKey("GroupSetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Excellerent.Usermanagement.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Excellerent.ClientManagement.Domain.Models.ClientDetails", b =>
                {
                    b.Navigation("BillingAddress");

                    b.Navigation("ClientContacts");

                    b.Navigation("CompanyContacts");

                    b.Navigation("OperatingAddress");
                });

            modelBuilder.Entity("Excellerent.ResourceManagement.Domain.Models.Employee", b =>
                {
                    b.Navigation("EmergencyContact");

                    b.Navigation("EmployeeAddress");

                    b.Navigation("EmployeeOrganization");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("Excellerent.Timesheet.Domain.Models.TimeSheet", b =>
                {
                    b.Navigation("TimeEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
